package sicce.api.info;

// Generated by MyEclipse Persistence Tools

import java.util.Date;

import sicce.api.info.auto.AbstractMeasure;

/**
 * Measure generated by MyEclipse Persistence Tools
 */
public class Measure extends AbstractMeasure implements java.io.Serializable {

    /** default constructor */
	public Measure() {
	}

	/** minimal constructor */
	public Measure(Integer idMeasure, PowerMeter powerMeter,
			Location location, Double instantaneousCurrentPhase1,
			Double instantaneousCurrentPhase2,
			Double instantaneousCurrentPhase3, Double neutralCurrent,
			Double phaseToPhaseVoltagePhase1To2,
			Double phaseToPhaseVoltagePhase2To3,
			Double phaseToPhaseVoltagePhase3To1,
			Double phaseToNeutralVoltagePhase1,
			Double phaseToNeutralVoltagePhase2,
			Double phaseToNeutralVoltagePhase3, Double frequency,
			Double totalActivePower, Double totalReactivePower,
			Double totalApparentPower, Double activePowerPhase1,
			Double activePowerPhase2, Double activePowerPhase3,
			Double reactivePowerPhase1, Double reactivePowerPhase2,
			Double reactivePowerPhase3, Double apparentPowerPhase1,
			Double apparentPowerPhase2, Double apparentPowerPhase3,
			Double demandCurrentPhase1, Double demandCurrentPhase2,
			Double demandCurrentPhase3, Double puissanceApparenteMoyenneTotale,
			Double maximumDemandCurrentPhase1,
			Double maximumDemandCurrentPhase2,
			Double maximumDemandCurrentPhase3,
			Double maximumDemandActivePowerPlus,
			Double maximumDemandActivePowerMinus,
			Double maximumDemandReactivePowerPlus,
			Double maximumDemandReactivePowerMinus,
			Double maximumDemandApparentPower, Double operatingTimeCounter,
			Double activeEnergyInPlus, Double reactiveEnergyInPlus,
			Double apparentEnergy, Double activeEnergyOutMinus,
			Double reactiveEnergyOutMinus, Double input1PulseCounter)
        {
            super(idMeasure, powerMeter,
			location, instantaneousCurrentPhase1,
			instantaneousCurrentPhase2,
			instantaneousCurrentPhase3, neutralCurrent,
			phaseToPhaseVoltagePhase1To2,
			phaseToPhaseVoltagePhase2To3,
			phaseToPhaseVoltagePhase3To1,
			phaseToNeutralVoltagePhase1,
			phaseToNeutralVoltagePhase2,
			phaseToNeutralVoltagePhase3, frequency,
			totalActivePower, totalReactivePower,
			totalApparentPower, activePowerPhase1,
			activePowerPhase2, activePowerPhase3,
			reactivePowerPhase1, reactivePowerPhase2,
			reactivePowerPhase3,  apparentPowerPhase1,
			apparentPowerPhase2, apparentPowerPhase3,
			demandCurrentPhase1, demandCurrentPhase2,
			demandCurrentPhase3, puissanceApparenteMoyenneTotale,
			maximumDemandCurrentPhase1,
			maximumDemandCurrentPhase2,
			maximumDemandCurrentPhase3,
			maximumDemandActivePowerPlus,
			maximumDemandActivePowerMinus,
			maximumDemandReactivePowerPlus,
			maximumDemandReactivePowerMinus,
			maximumDemandApparentPower, operatingTimeCounter,
			activeEnergyInPlus, reactiveEnergyInPlus,
			apparentEnergy, activeEnergyOutMinus,
			reactiveEnergyOutMinus, input1PulseCounter);
        }

}
