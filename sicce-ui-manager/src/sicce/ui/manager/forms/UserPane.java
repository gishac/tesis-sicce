/*
 * UserPane.java
 *
 * Created on January 26, 2008, 7:43 PM
 */
package sicce.ui.manager.forms;

import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import sicce.api.businesslogic.factory.ClassFactory;
import sicce.api.businesslogic.RoleBizObject;
import sicce.api.businesslogic.model.SicceComboBoxModel;
import sicce.api.businesslogic.renderer.SicceComboBoxRenderer;
import sicce.api.businesslogic.model.SicceTableModel;
import sicce.api.businesslogic.UserBizObject;
import sicce.api.businesslogic.model.UserTableModel;
import sicce.api.dataaccess.UserDB;
import sicce.api.info.ConstantsProvider.DialogResult;
import sicce.api.info.ConstantsProvider.DisplayMemberRenderType;
import sicce.api.info.interfaces.IRole;
import sicce.api.info.interfaces.IUserSicce;
import sicce.api.util.ComponentUtil;
import sicce.api.util.EncryptionProvider;
import sicce.api.util.JTextFieldLimit;
import sicce.api.util.Validator;
import sicce.ui.manager.controls.JTabExtended;
import sicce.ui.manager.controls.SearchDialog;

/**
 *
 * @author  gish@c
 */
public class UserPane extends JTabExtended<IUserSicce> {

    SicceComboBoxModel<IRole> roleComboBoxModel;
    SicceComboBoxRenderer roleComboBoxRenderer;
    RoleBizObject roleBizObject;
    UserBizObject userBizObject;
    UserTableModel userTableModel;

    /** Creates new form LocationPane */
    public UserPane() {
        initComponents();
        getControlsToClear().add(txtFirstName);
        getControlsToClear().add(txtLastName);
        getControlsToClear().add(txtName);
        getControlsToClear().add(txtPassword);
        getControlsToClear().add(cmbRole);
        getControlsToEnable().add(txtFirstName);
        getControlsToEnable().add(txtLastName);
        getControlsToEnable().add(txtName);
        getControlsToEnable().add(txtPassword);
        getControlsToEnable().add(cmbRole);
        ComponentUtil.SetState(false, getControlsToEnable());
        txtName.setDocument(new JTextFieldLimit(20));
        txtLastName.setDocument(new JTextFieldLimit(20));
        txtFirstName.setDocument(new JTextFieldLimit(20));
        txtPassword.setDocument(new JTextFieldLimit(20));
        userBizObject = new UserBizObject();
        roleBizObject = new RoleBizObject();
        LoadComboBoxes();
        FillGrid();
    }

    private void LoadComboBoxes() {
        roleComboBoxModel = new SicceComboBoxModel<IRole>(roleBizObject.GetAllRoles());
        roleComboBoxRenderer = new SicceComboBoxRenderer("getDescription", DisplayMemberRenderType.Method, "getIdRole", DisplayMemberRenderType.Method);
        cmbRole.setModel(roleComboBoxModel);
        cmbRole.setRenderer(roleComboBoxRenderer);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        cmbRole = new javax.swing.JComboBox();
        txtPassword = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        gridUsers = new javax.swing.JTable();

        setName("Form"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sicce.ui.manager.forms.SicceuimanagerApp.class).getContext().getResourceMap(UserPane.class);
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel4.border.title"))); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(null);

        txtName.setName("txtName"); // NOI18N
        jPanel4.add(txtName);
        txtName.setBounds(120, 30, 150, 20);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel4.add(jLabel3);
        jLabel3.setBounds(20, 90, 100, 14);

        jLabel4.setBackground(resourceMap.getColor("jLabel4.background")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jLabel4.setOpaque(true);
        jPanel4.add(jLabel4);
        jLabel4.setBounds(20, 30, 60, 14);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel4.add(jLabel2);
        jLabel2.setBounds(20, 60, 80, 14);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        jPanel4.add(jLabel5);
        jLabel5.setBounds(20, 150, 60, 14);

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        jPanel4.add(jLabel6);
        jLabel6.setBounds(20, 120, 60, 14);

        txtFirstName.setName("txtFirstName"); // NOI18N
        jPanel4.add(txtFirstName);
        txtFirstName.setBounds(120, 120, 200, 20);

        txtLastName.setName("txtLastName"); // NOI18N
        jPanel4.add(txtLastName);
        txtLastName.setBounds(120, 150, 200, 20);

        cmbRole.setName("cmbRole"); // NOI18N
        cmbRole.setOpaque(false);
        jPanel4.add(cmbRole);
        cmbRole.setBounds(120, 60, 200, 20);

        txtPassword.setText(resourceMap.getString("txtPassword.text")); // NOI18N
        txtPassword.setName("txtPassword"); // NOI18N
        jPanel4.add(txtPassword);
        txtPassword.setBounds(120, 90, 200, 20);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        gridUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Object", "Nombre", "Rol", "Usuario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gridUsers.setName("gridUsers"); // NOI18N
        jScrollPane1.setViewportView(gridUsers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.getAccessibleContext().setAccessibleName(resourceMap.getString("jPanel4.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if (currentObject == null) {
            LoadComboBoxes();
            FillGrid();
        }
    }//GEN-LAST:event_formComponentShown
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbRole;
    private javax.swing.JTable gridUsers;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
    @Override
    public boolean Delete() throws Exception {
        cancelAction = false;
        try {
            UserDB.Delete(currentObject);
            super.Delete();
            FillGrid();

        } catch (Exception ex) {
            cancelAction = true;
            throw ex;
        }
        return cancelAction;
    }

    @Override
    public void New() {
        super.New();
        currentObject = ClassFactory.getUserInstance();
        txtName.requestFocusInWindow();
    }

    @Override
    public boolean Save() throws Exception {
        super.Save();
        cancelAction = false;
        if (!CheckFields()) {
            return true;
        }
        try {
            currentObject.setName(txtFirstName.getText());
            currentObject.setRole((IRole) cmbRole.getSelectedItem());
            currentObject.setPasswordSicce(EncryptionProvider.Encrypt(new String(txtPassword.getPassword())));
            currentObject.setUsernameSicce(txtName.getText());
            currentObject.setLastname(txtLastName.getText());
            if (IsObjectLoaded()) {
                return Update();
            }
            UserDB.Save(currentObject);
            FillGrid();
        } catch (Exception ex) {
            ex.printStackTrace();
            cancelAction = true;
        }
        return cancelAction;
    }

    @Override
    public DialogResult Search() {
        SearchDialog<IUserSicce> searchRolesDialog = new SearchDialog<IUserSicce>(new JFrame(), true, new UserTableModel(userBizObject.GetAllUsers()));
        searchRolesDialog.setVisible(true);
        DialogResult result = searchRolesDialog.getDialogResult();
        if (result == DialogResult.Ok) {
            currentObject = searchRolesDialog.getSearchResult();
            SetUIElements();
        }
        return result;
    }

    @Override
    public boolean Update() throws Exception {
        cancelAction = false;
        try {
            UserDB.Update(currentObject);
            FillGrid();
        } catch (Exception ex) {
            cancelAction = true;
        }
        return cancelAction;
    }

    @Override
    public void ItemSelected(int selectedIndex) {
        super.ItemSelected(selectedIndex);
        SicceTableModel<IUserSicce> tableModel = (SicceTableModel<IUserSicce>) gridUsers.getModel();
        currentObject = tableModel.getRow(selectedIndex);
        SetUIElements();
    }

    @Override
    public void SetUIElements() {
        if (currentObject == null) {
            return;
        }
        txtName.setText(currentObject.getUsernameSicce());
        txtFirstName.setText(currentObject.getName());
        roleComboBoxModel.setSelectedItem(currentObject.getRole(), roleComboBoxRenderer);
        txtPassword.setText(EncryptionProvider.Decrypt(currentObject.getPasswordSicce()));
        txtLastName.setText(currentObject.getLastname());
    }

    @Override
    public void RegisterSelectionListener() {
        gridUsers.getSelectionModel().addListSelectionListener(selectionListener);
        gridUsers.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    @Override
    public void FillGrid() {
        userTableModel = new UserTableModel(userBizObject.GetAllUsers());
        gridUsers.setModel(userTableModel);
    }

    @Override
    public void CancelSave() {
        if (currentObject != null) {
            if (currentObject.getID() != null) {
                IUserSicce originalInstance = UserDB.FindUserByID(currentObject.getID());
                this.currentObject = originalInstance;
            } else {
                this.currentObject = ClassFactory.getUserInstance();
            }
        }
    }

    @Override
    public boolean CheckFields() {
        if (!Validator.ValidateField(null, null, 0, txtName, true, "el login del usuario", 3)) {
            return false;
        }
        if (!Validator.ValidateField(null, null, 0, txtFirstName, true, "el nombre del usuario", 3)) {
            return false;
        }
        if (!Validator.ValidateField(null, null, 0, txtLastName, true, "el apellido del usuario", 3)) {
            return false;
        }
        if (!Validator.ValidateField(null, null, 0, txtPassword, true, "la contraseña del usuario", 3)) {
            return false;
        }
        return true;
    }
}
