/*
 * ChartPane.java
 *
 * Created on July 5, 2008, 4:18 AM
 */
package sicce.api.processor.viewer.controls;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.util.Set;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import org.jdesktop.application.ResourceMap;
import org.jfree.chart.ChartPanel;
import sicce.api.info.ComboBoxItem;
import sicce.api.info.ConstantsProvider.ModbusRegister;
import sicce.api.info.interfaces.IPowerMeter;
import sicce.api.processor.Processor;
import sicce.api.processor.viewer.handlers.ChartViewHandler;
import sicce.api.processor.viewer.handlers.MeasureVisibilityHandler;

/**
 * Panel grafico de monitoreo de las mediciones
 * @author  gish@c
 */
public class ChartPane extends DataDisplayer {

    /**
     * Manejador de datos del grafico
     */
    private ChartViewHandler chartHandler;
    
    /**
     * Titulo del grafico
     */
    private String chartTitle;
    
    /**
     * Manejador de las mediciones visibles
     */
    private MeasureVisibilityHandler measureVisibilityHandler;
    
    /**
     * Panel para mostrar los medidores disponibles
     */
    private JPanel powerMetersPane;
    
    
    /**
     * Medidores a ser visualizados en el grafico
     */
    private Set<IPowerMeter> powerMetersForCurrentUser;
    
    /**
     * Devuelve el manejador de datos del grafico
     * @return Manejador de datos del grafico
     */
    private ChartViewHandler getChartHandler() {
        if (chartHandler == null) {
            chartHandler = new ChartViewHandler(powerMetersForCurrentUser);
        }
        return chartHandler;
    }

    /**
     * Constructor
     * @param chartTitle Titulo del chart
     * @param resourceMap Manejador de recursos
     * @param powerMetersForCurrentUser Medidores a ser visualizados en el grafico
     */
    public ChartPane(String chartTitle, ResourceMap resourceMap,Set<IPowerMeter> powerMetersForCurrentUser, Processor processor) {
        initComponents();
        this.chartTitle = chartTitle;
        this.processor = processor;
        this.resourceMap = resourceMap;
        this.powerMetersForCurrentUser = powerMetersForCurrentUser;
        LoadAvailablePowerMeters();
        BuildChart();
        AttachChartToDataProcessor();
        measureVisibilityHandler = MeasureVisibilityHandler.getInstance();
        measureVisibilityHandler.FillMeasures(cmbMeasures);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chartToolbar = new javax.swing.JToolBar();
        btnSaveGraph = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        lblCurrentMeasure = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        cmbMeasures = new javax.swing.JComboBox();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        chartToolbar.setFloatable(false);
        chartToolbar.setRollover(true);
        chartToolbar.setMaximumSize(new java.awt.Dimension(273, 25));
        chartToolbar.setMinimumSize(new java.awt.Dimension(265, 25));
        chartToolbar.setName("chartToolbar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sicce.api.processor.viewer.SicceapiprocessorviewerApp.class).getContext().getResourceMap(ChartPane.class);
        btnSaveGraph.setIcon(resourceMap.getIcon("btnSaveGraph.icon")); // NOI18N
        btnSaveGraph.setText(resourceMap.getString("btnSaveGraph.text")); // NOI18N
        btnSaveGraph.setToolTipText(resourceMap.getString("btnSaveGraph.toolTipText")); // NOI18N
        btnSaveGraph.setFocusable(false);
        btnSaveGraph.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveGraph.setName("btnSaveGraph"); // NOI18N
        btnSaveGraph.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveGraphActionPerformed(evt);
            }
        });
        chartToolbar.add(btnSaveGraph);

        jSeparator1.setName("jSeparator1"); // NOI18N
        chartToolbar.add(jSeparator1);

        lblCurrentMeasure.setFont(resourceMap.getFont("lblCurrentMeasure.font")); // NOI18N
        lblCurrentMeasure.setText(resourceMap.getString("lblCurrentMeasure.text")); // NOI18N
        lblCurrentMeasure.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        lblCurrentMeasure.setName("lblCurrentMeasure"); // NOI18N
        chartToolbar.add(lblCurrentMeasure);

        jSeparator2.setName("jSeparator2"); // NOI18N
        chartToolbar.add(jSeparator2);

        cmbMeasures.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMeasures.setMaximumSize(new java.awt.Dimension(200, 25));
        cmbMeasures.setMinimumSize(new java.awt.Dimension(200, 25));
        cmbMeasures.setName("cmbMeasures"); // NOI18N
        cmbMeasures.setPreferredSize(new java.awt.Dimension(200, 25));
        cmbMeasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMeasuresActionPerformed(evt);
            }
        });
        chartToolbar.add(cmbMeasures);

        add(chartToolbar, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Guarda una imagen del grafico actual
     * @param evt
     */
    private void btnSaveGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveGraphActionPerformed
        SaveChart();
    }//GEN-LAST:event_btnSaveGraphActionPerformed

    /**
     * Seleciona el parametro a ser visualizado en el grafico
     * @param evt
     */
    private void cmbMeasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMeasuresActionPerformed
        ComboBoxItem<ModbusRegister> selectedItem = (ComboBoxItem<ModbusRegister>)cmbMeasures.getSelectedItem();
        lblCurrentMeasure.setText(selectedItem.getId());
        getChartHandler().HandleMeasureChanged(selectedItem.getValue().ordinal(),selectedItem.getId());
    }//GEN-LAST:event_cmbMeasuresActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveGraph;
    private javax.swing.JToolBar chartToolbar;
    private javax.swing.JComboBox cmbMeasures;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JLabel lblCurrentMeasure;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Devuelve el panel donde se muestran los medidores a visualizar
     * @return Panel donde se muestran los medidores a visualizar
     */
     public JPanel getPowerMetersPane() {
        if (powerMetersPane == null) {
            powerMetersPane = new JPanel();
            powerMetersPane.setPreferredSize(new Dimension(200, Toolkit.getDefaultToolkit().getScreenSize().height));
            powerMetersPane.setBorder(new TitledBorder(resourceMap.getString("PowerMeterPaneTitle")));
            powerMetersPane.setLayout(new BoxLayout(powerMetersPane, BoxLayout.PAGE_AXIS));
        }
        return powerMetersPane;
    }
    
    /**
     * Crea el chart
     */
    private void BuildChart() {
        ChartViewHandler chartUIHandler = getChartHandler();
        ChartPanel chartPanel = chartUIHandler.BuildChart(chartTitle);
        this.add(chartPanel, BorderLayout.CENTER);
    }

    /**
     * Agrega el manejador de datos del grafico como observador de eventos de las lecturas de los medidores
     */
    private void AttachChartToDataProcessor() {
        this.processor.AddObserver(getChartHandler().getChartObserver());
    }

    /**
     * Guarda una imagen del grafico actual
     */
    public void SaveChart(){
        getChartHandler().SaveChart();
    }
    
    /**
     * Carga los medidores a monitorear en el panel de medidores disponibles
     */
    public void LoadAvailablePowerMeters(){
        
        for (IPowerMeter powerMeter : powerMetersForCurrentUser) {
            JCheckBox checkbox = new JCheckBox(powerMeter.getDescription());
            checkbox.setName(powerMeter.getSerial());
            checkbox.setSelected(true);
            getPowerMetersPane().add(checkbox);
            checkbox.addActionListener(new ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    JCheckBox sender = (JCheckBox) evt.getSource();
                    getChartHandler().HandlePowerMeterVisibility(sender.getName(), sender.isSelected());
                }
            });
        }
        
        add(getPowerMetersPane(),BorderLayout.WEST);
    }
}
